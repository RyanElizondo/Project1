public class Roster {
    private Student[] roster;
    private int size;

    public Roster(){
        this.size = 4;
        this.roster = new Student[size];
    }

    //returns index if found, -1 otherwise
    private int find(Student student){
        for(int i = 0; i < size; i++){
            if(roster[i].equals(student)) return i;
        }
        return -1;
    }
    //increase capacity of array by 4
    private void grow(){
        int tempSize = size;
        size+=4;
        Student[] tempArr = new Student[size];
        for(int i = 0; i < tempSize; i++){
            tempArr[i] = roster[i];
        }
        roster = tempArr;
    }

    public boolean add(Student student){
        if(roster[size-1]!=null) grow();
        int i = 0;
        while(roster[i]!=null){
            i++;
        }
        roster[i] = student;
        return true;
    }

    public boolean contains(Student student){
        for(int i = 0; i < size; i++){
            if(roster[i]==null) return false;
            if(roster[i].compareTo(student)==0) return true;
        }
        return false;
    }

    public boolean remove(Student student){
        if(!contains(student)) return false;
        int index = find(student);
        for(int i = index; i < size; i++){
            if(i+1<size && roster[i+1]==null){
                roster[i] = null;
                return true;
            }
            if(i+1 < size) roster[i] = roster[i+1];
        }
        roster[size-1] = null;
        return true;
    }

    public void print(){
        //sort lexicographically
        for(int i = 0; i < size; i++){
            for(int j = i + 1; j < size; j++){
                if(roster[i]==null || roster[j]==null) break;
                if(roster[i].compareTo(roster[j])>0){
                    Student temp = roster[i];
                    roster[i] = roster[j];
                    roster[j] = temp;
                }
            }
        }
        //print from 0 to size-1
        int i = 0;
        while(i!=size && roster[i]!=null){
            System.out.println(roster[i].toString());
            if(i<size) i++;
        }
    }

    //first sort by school, then sort by major (if schools are same), then sort by name (if majors are same)
    public void printBySchoolMajor(){
        //sort by school
        for(int i = 0; i < size; i++){
            for(int j = i + 1; j < size; j++){
                if(roster[i]==null || roster[j]==null) break;
                if(roster[i].getMajor().getSchool().compareTo(roster[j].getMajor().getSchool())>0){
                    Student temp = roster[i];
                    roster[i] = roster[j];
                    roster[j] = temp;
                }
            }
        }
        //sort by major WITHIN school
        for(int i = 0; i < size; i++){
            for(int j = i + 1; j < size; j++){
                if(roster[i]==null || roster[j]==null) break;
                if(roster[i].getMajor().getMajorCode().compareTo(roster[j].getMajor().getMajorCode())>0 &&
                roster[i].getMajor().getSchool().compareTo(roster[j].getMajor().getSchool())==0){
                    Student temp = roster[i];
                    roster[i] = roster[j];
                    roster[j] = temp;
                }
            }
        }
        //sort by name within school and major
        for(int i = 0; i < size; i++){
            for(int j = i + 1; j < size; j++){
                if(roster[i]==null || roster[j]==null) break;
                if(roster[i].compareTo(roster[j])>0 &&
                        roster[i].getMajor().getSchool().compareTo(roster[j].getMajor().getSchool())==0 &&
                        roster[i].getMajor().getMajorCode().compareTo(roster[j].getMajor().getMajorCode())==0){
                    Student temp = roster[i];
                    roster[i] = roster[j];
                    roster[j] = temp;
                }
            }
        }
        //print array sequentially
        int i = 0;
        while(i!=size && roster[i]!=null){
            System.out.println(roster[i].toString());
            if(i<size) i++;
        }
    }
    public void printByStanding(){
        //sort by standing (credit completed)
        for(int i = 0; i < size; i++){
            for(int j = i + 1; j < size; j++){
                if(roster[i]==null || roster[j]==null) break;
                if(roster[i].getCreditCompleted() < roster[j].getCreditCompleted()){
                    Student temp = roster[i];
                    roster[i] = roster[j];
                    roster[j] = temp;
                }
            }
        }
        //sort by profile if two students have the same credits
        for(int i = 0; i < size; i++){
            for(int j = i + 1; j < size; j++){
                if(roster[i]==null || roster[j]==null) break;
                if(roster[i].compareTo(roster[j])>0 && roster[i].getCreditCompleted() == roster[j].getCreditCompleted()){
                    Student temp = roster[i];
                    roster[i] = roster[j];
                    roster[j] = temp;
                }
            }
        }
        //print sequentially
        int i = 0;
        while(i!=size && roster[i]!=null){
            System.out.println(roster[i].toString());
            if(i<size) i++;
        }
    }
}
