import java.util.Calendar;
public class Date implements Comparable<Date> {
    private int year;
    private int month;
    private int day;

    Calendar c = Calendar.getInstance();

    @Override
    public String toString(){
        String  str = "";
        str = str + this.month + "/";
        str = str + this.day + "/";
        str = str + this.year;
        return str;
    }
    @Override
    public boolean equals(Object Date){
       if(this == Date) return true;
       if(!(Date instanceof Date)) return false;
       Date D = (Date) Date;
       if(this.day == D.getDay() && this.month == D.getMonth() && this.year == D.getYear()) return true;
       return false;
    }
    //if the instance object is less than the parameter object return -1, if larger return 1, if equal return 0
    @Override
    public int compareTo(Date Date){
        if(this.year < Date.getYear()) return -1;
        if(this.year > Date.getYear()) return 1;
        if(this.month < Date.getMonth()) return -1;
        if(this.month > Date.getMonth()) return 1;
        if(this.day < Date.getDay()) return -1;
        if(this.day > Date.getDay()) return 1;
        return 0;
    }

    public Date() {
        this.year = c.get(Calendar.YEAR);
        this.day = c.get(Calendar.DAY_OF_MONTH);
        this.month = c.get(Calendar.MONTH) + 1; //since calendar.month goes from 0 (jan) to 11 (dec)
    }

    public Date(String date) {
        this.month = Integer.parseInt(date.substring(0,date.indexOf("/")));
        this.day = Integer.parseInt(date.substring(date.indexOf("/")+1,date.lastIndexOf("/")));
        this.year =  Integer.parseInt(date.substring(date.lastIndexOf("/")+1));
    }

    public int getDay(){
        return day;
    }
    public int getMonth(){
        return month;
    }
    public int getYear(){
        return year;
    }

    public static final int QUADRENNIAL = 4;
    public static final int CENTENNIAL = 100;
    public static final int QUATERCENTENNIAL = 400;
    public static final int daysInJanuary = 31;
    public static final int daysInFebruary = 28;
    public static final int daysInFebruaryLeapYear = 29;
    public static final int daysInMarch = 31;
    public static final int daysInApril = 30;
    public static final int daysInMay = 31;
    public static final int daysInJune = 30;
    public static final int daysInJuly = 31;
    public static final int daysInAugust = 31;
    public static final int daysInSeptember = 30;
    public static final int daysInOctober = 31;
    public static final int daysInNovember = 30;
    public static final int daysInDecember = 31;


    public boolean isLeapYear() {
        if((year % QUADRENNIAL) == 0){
            if((year % CENTENNIAL)==0){
                if((year % QUATERCENTENNIAL)==0){
                    return true;
                } else {
                    return false;
                }
            } else {
                return true;
            }
        } else {
            return false;
        }
    }

    public boolean isSixteen() {
        int age = c.get(Calendar.YEAR) - this.year;
        boolean tf;
        if(this.month > c.get(Calendar.MONTH)+1){
            age--;
        }
        if(this.month == c.get(Calendar.MONTH)+1){
            if(this.day > c.get(Calendar.DAY_OF_MONTH)){
                age--;
            }
        }
        return age >= 16;

    }

    public boolean isValid() {
        if(month > 12 || month < 1) {
            return false;
        } else {
            switch(month) {
                case 1:
                    if(day > daysInJanuary)
                        return false;
                    break;
                case 2:
                    if(isLeapYear()){
                        if(day > daysInFebruaryLeapYear)
                            return false;
                    } else {
                        if(day > daysInFebruary)
                            return false;
                    }
                    break;
                case 3:
                    if(day > daysInMarch)
                        return false;
                    break;
                case 4:
                    if(day > daysInApril)
                        return false;
                    break;
                case 5:
                    if(day > daysInMay)
                        return false;
                case 6:
                    if(day > daysInJune)
                        return false;
                    break;
                case 7:
                    if(day > daysInJuly)
                        return false;
                    break;
                case 8:
                    if(day > daysInAugust)
                        return false;
                    break;
                case 9:
                    if(day > daysInSeptember)
                        return false;
                    break;
                case 10:
                    if(day > daysInOctober)
                        return false;
                    break;
                case 11:
                    if(day > daysInNovember)
                        return false;
                    break;
                case 12:
                    if(day > daysInDecember)
                        return false;
                    break;
            }
            if(year < c.get(Calendar.YEAR)){
                return true;
            } else if (year > c.get(Calendar.YEAR)){
                return false;
            } else {
                if(this.month < (c.get(Calendar.MONTH)+1)){
                    return true;
                } else if (this.month > (c.get(Calendar.MONTH)+1)){
                    return false;
                } else {
                    if(this.day <= (c.get(Calendar.DAY_OF_MONTH))) {
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        }
    }

    //testbed main method checking for validity of date
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while(true){
            System.out.println("Enter a date in the format mm/dd/yyyy");
            String date = in.nextLine();
            if(date.equals("Q")) break;
            Date d = new Date(date);
            System.out.println(d.isValid());
        }
    }
}
